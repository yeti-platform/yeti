import logging
from datetime import timedelta
from typing import ClassVar

from core import taskmanager
from core.schemas import entity, task


class Malpedia_Malware(task.FeedTask):
    _defaults = {
        "frequency": timedelta(days=1),
        "name": "Malpedia",
        "description": "Gets list of malpedia malwares",
        "source": "https://malpedia.caad.fkie.fraunhofer.de/",
    }

    _SOURCE: ClassVar["str"] = (
        "https://malpedia.caad.fkie.fraunhofer.de/api/get/families"
    )

    def run(self):
        response = self._make_request(self._SOURCE)
        if not response:
            return
        families_json = response.json()
        for sign_mal, entry in families_json.items():
            self.analyze_entry_malware(sign_mal, entry)

    def analyze_entry_malware(self, name_malware, entry: dict):
        """Analyzes an entry as specified in the malpedia json."""
        try:
            m = entity.Malware.find(name=entry["common_name"])
            if not m:
                m = entity.Malware(name=entry["common_name"])

        except Exception as e:
            logging.error(f"Error creating malware entity: {e}")
            return
        
        m.aliases = entry.get("aliases", [])
        if entry.get("description"):
            if m.description:
                m.description += "## Malpedia\n\n"
                m.description += entry["description"]

            m.description += "\n\n## External references\n\n"
            for url in entry["urls"]:
                m.description += f"* {url}\n"
        
        m.family = entry.get("type", "")
        m = m.save()
        attributions = entry.get("attribution", [])
        for attribution in attributions:
            intrusion_set = entity.IntrusionSet.find(name=attribution)
            if not intrusion_set:
                intrusion_set = entity.IntrusionSet(name=attribution).save()
            intrusion_set.link_to(m, "uses", "Malpedia")

        tags = []
        if m.aliases:
            tags += m.aliases
        tags.append(m.name)
        tags.append(name_malware)
        m.tag(tags)


taskmanager.TaskManager.register_task(Malpedia_Malware)
