from datetime import timedelta
from typing import ClassVar

from core import taskmanager
from core.schemas import entity, task


class Malpedia_Malware(task.FeedTask):
    _defaults = {
        "frequency": timedelta(days=1),
        "name": "Malpedia",
        "description": "Gets list of malpedia malwares",
        "source": "https://malpedia.caad.fkie.fraunhofer.de/",
    }

    _SOURCE: ClassVar["str"] = (
        "https://malpedia.caad.fkie.fraunhofer.de/api/get/families"
    )

    def run(self):
        response = self._make_request(self._SOURCE)
        if not response:
            return
        families_json = response.json()
        for sign_mal, entry in families_json.items():
            self.analyze_entry_malware(sign_mal, entry)

    def analyze_entry_malware(self, name_malware, entry: dict):
        """Analyzes an entry as specified in the malpedia json."""
        m = entity.Malware(name=entry["common_name"], description=entry["description"])

        if entry.get("alt_names"):
            m.aliases = entry["aliases"]
        if entry.get("description"):
            m.description += "## Malpedia"
            m.description += entry["description"]

        if entry.get("urls"):
            m.description += "\n\n"
            m.description += "## External references\n\n"
            for url in entry["urls"]:
                m.description += f"* {url}\n"
        if entry.get('type'):
            m.family = entry['type']
        m.save()
        if entry.get("attribution"):
            for attribution in entry["attribution"]:
                intrusion_set = entity.IntrusionSet(name=attribution)
                intrusion_set.save()
                intrusion_set.link_to(m, "uses", "Malpedia")

        tags = []
        if m.aliases:
            tags += m.aliases
        tags.append(m.name)
        tags.append(name_malware)
        m.tag(tags)


taskmanager.TaskManager.register_task(Malpedia_Malware)
