import logging
from datetime import timedelta, datetime

from core.schemas import observable
from core.schemas import task
from core import taskmanager
import pandas as pd
from io import StringIO


class AbuseCHMalwareBazaaar(task.FeedTask):
    default_values = {
        "frequency": timedelta(hours=1),
        "name": "AbuseCHMalwareBazaaar",
        "description": "This feed contains md5/sha1/sha256",
    }

    SOURCE = "https://bazaar.abuse.ch/export/csv/recent/"

    def run(self):
        data = {"query": "get_recent", "selector": "time"}

        response = self._make_request(self.SOURCE, auth=None, verify=True)

        if response.status_code != 200:
            logging.error(f"Got unexpected status code from {self.SOURCE}: {response.status_code}")
            raise RuntimeError(f"Got unexpected status code from {self.SOURCE}: {response.status_code}")
        data = StringIO(response.text)

        names = [
            "first_seen_utc",
            "sha256_hash",
            "md5_hash",
            "sha1_hash",
            "reporter",
            "file_name",
            "file_type_guess",
            "mime_type",
            "signature",
            "clamav",
            "vtpercent",
            "imphash",
            "ssdeep",
            "tlsh",
        ]

        df = pd.read_csv(
            data,
            comment="#",
            delimiter=",",
            names=names,
            quotechar='"',
            quoting=True,
            skipinitialspace=True,
            parse_dates=["first_seen_utc"],
        )
        
        df = self._filter_observables_by_time(df, "first_seen_utc")
        df = df.fillna("")
        for _, line in df.iterrows():
            self.analyze(line)
        
        return True

    def analyze(self, block):
        if not block.get("sha256_hash"):
            return

        context = {}

        context["first_seen"] = block["first_seen_utc"]
        context["source"] = self.name
        context["filename"] = block["file_name"]
        context["md5"] = block["md5_hash"]
        context["sha1"] = block["sha1_hash"]
        context["sha256"] = block["sha256_hash"]
        context["imphash"] = block["imphash"]
        context["ssdeep"] = block["ssdeep"]
        tags = []

        file_value = "FILE:{}".format(block["sha256_hash"])
        
        malware_file = observable.Observable.find(value=file_value)
        if not malware_file:
            malware_file = observable.Observable(value=file_value, type="file").save()
        logging.debug(f"Malware file: {malware_file} source: {self.name} context: {context}")
        malware_file.add_context(self.name, context)
        logging.debug(malware_file)
        tags.append(block["mime_type"])

        if 'tags' in block:
            tags.extend(block['tags'].split(','))   
        
        malware_file.tag(tags)
    
        # md5, sha1, sha256
        for hash_type in ("md5_hash", "sha1_hash", "sha256_hash"):
                hash_value = block[hash_type]
                hash_data = observable.Observable.find(value=hash_value)
                if not hash_data:
                    hash_data = observable.Observable(
                        value=hash_value, type=hash_type.split("_")[0]
                    ).save()

                hash_data.add_context(source=self.name, context=context)
                hash_data.tag(tags)

                malware_file.link_to(hash_data, hash_type, self.name)
           

taskmanager.TaskManager.register_task(AbuseCHMalwareBazaaar)
